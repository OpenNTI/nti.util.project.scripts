/*eslint camelcase:0*/
'use strict';
process.env.NODE_ENV = 'development';

const DEBUG = process.argv.includes('--debug') || process.argv.includes('--profile');

//Webpack plugins:
const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const paths = require('./paths');

const ENV = 'development';
const PROD = false;

const {loaders: jsLoaders, preloaders: jsPreloaders} = require('@nti/app-scripts/config/js-loaders');
const {loaders: cssLoaders, plugins: cssPlugins} = require('@nti/app-scripts/config/css-loaders');

const pkg = require(paths.packageJson);

const getWorkspace = require('@nti/lib-scripts/config/workspace');
const workspaceLinks = (!PROD && paths.workspace)
	? getWorkspace(paths.workspace, paths.packageJson)
	: {};


//TODO: Figure out how to inherit webpack config from app-scripts and mutate to target cmp-scripts needs so we
//		can maintain one set of loader/workspace implementations.

exports = module.exports = {
	mode: ENV,
	bail: PROD,
	entry: {
		index: [
			require.resolve('./polyfills'),
			paths.resolveApp('./test/app/index.js')
		]
	},
	output: {
		path: '/',
		filename: '[name].js',
		publicPath: '/'
	},

	devtool: 'cheap-module-source-map',

	node: {
		dgram: 'empty',
		fs: 'empty',
		net: 'empty',
		tls: 'empty',
	},

	target: 'web',

	resolve: {
		extensions: ['.js', '.jsx', '.mjs', '.mjsx'],
		alias: {
			...workspaceLinks,

			// Support React Native Web
			// https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
			'react-native': 'react-native-web',
		},
	},

	module: {
		strictExportPresence: true,
		rules: [
			// Disable require.ensure as it's not a standard language feature.
			{ parser: { requireEnsure: false } },

			...jsPreloaders({
				// We still need eslint to reconfigure for each workspace project
				// eslint: {
				// 	useEslintrc: false,
				// 	baseConfig: {
				// 		extends: [require.resolve('./eslintrc')]
				// 	}
				// },
				includes: [
					paths.testApp
				]
			}),

			{
				oneOf: [
					...jsLoaders({
						babel: {
							presets: [require.resolve('./babel.config.js')]
						}
					}),

					{
						test: /-avatar.png$/,
						loader: require.resolve('url-loader'),
						options: {
							mimeType: 'image/[ext]'
						}
					},

					{
						test: /\.template\.svg$/,
						loader: require.resolve('raw-loader')
					},

					{
						test: /\.(ico|gif|png|jpg|svg)(\?.*)?$/,
						exclude: [/-avatar.png$/, /\.template\.svg$/],
						loader: require.resolve('url-loader'),
						options: {
							limit: 50,
							name: 'assets/[name]-[hash].[ext]',
							mimeType: 'image/[ext]'
						}
					},

					{
						test: /\.(woff|ttf|eot|otf)(\?.*)?$/,
						loader: require.resolve('file-loader'),
						options: {
							name: 'assets/fonts/[hash].[ext]'
						}
					},

					{
						test: /\.(eot|ttf|woff)$/,
						loader: require.resolve('file-loader'),
						query: {
							name: 'assets/fonts/[name]-[hash].[ext]'
						}
					},

					...cssLoaders()

				].filter(Boolean)
			}
		].filter(Boolean)
	},

	optimization: {
		minimize: false
	},

	performance: false,
	devServer: {
		disableHostCheck: true,
		allowedHosts: ['.dev', '.local'],
		clientLogLevel: 'none',
		contentBase: paths.resolveApp('test/app/'),
		watchContentBase: true,
		overlay: {
			warnings: false,
			errors: true
		},
		proxy: [{
			context: ['/content', '/dataserver2'],
			target: 'http://localhost:8082',
		}],
		stats: 'errors-only',
	},

	plugins: [
		DEBUG && new CircularDependencyPlugin({
			// exclude detection of files based on a RegExp
			exclude: /node_modules/,

			// add errors to webpack instead of warnings
			// failOnError: true,

			onDetected ({ /*module,*/ paths: cycle, compilation }) {
				// `paths` will be an Array of the relative module paths that make up the cycle
				// `module` will be the module record generated by webpack that caused the cycle
				compilation.warnings.push(new Error(cycle.join('\n\t-> ')));
			}
		}),

		...cssPlugins({
			miniCssExtract: {
				filename: 'index.generated.css'
			}
		}),

		new HtmlWebpackPlugin({
			title: pkg.name + ': Test Harness',
			template: paths.exists(paths.testAppHtml, paths.testAppHtmlTemplate)
		}),

		// Watcher doesn't work well if you mistype casing in a path so we use
		// a plugin that prints an error when you attempt to do this.
		// See https://github.com/facebookincubator/create-react-app/issues/240
		new CaseSensitivePathsPlugin(),
	].filter(Boolean)
};
